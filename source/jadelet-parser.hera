Template
  __? Line* ->
    var top = a => a[a.length-1];
 
    function reduceLines(lines) {
      var depth = 0;
      var stack = [[]];
      var firstIndent = 0;

      lines.forEach( ([indent, line]) => {
        if (firstIndent === 0 && indent > depth + 1) {
          firstIndent = indent - 1;
        }
        indent = indent > firstIndent ? indent - firstIndent : indent;

        if (Array.isArray(line)) {
          line[1] = collectAttributes(line[1])
        }

        if (depth+1 === indent) {
          // We're adding to the content of the last element in the current stack
          stack.push(top(top(stack))[2])
        } else if ( indent > depth) {
          throw new Error("Indented too far")
        } else if (indent < depth) {
          stack = stack.slice(0, indent + 1)
        }

        depth = indent
        top(stack).push(line)
      })
  
      return stack[0]
    }

    function collectAttributes(attributesArray) {
      return attributesArray.reduce((o, [key, value]) => {
        if (key === "id" || key === "class" || key === "style") {
          var p = o[key] || (o[key] = [])
          p.push(value)
        } else {
          o[key] = value
        }
        return o
      }, {})
    }

    function pretty(lines) {
      return lines.map(line =>
        JSON.stringify(line)
      )
    }

    var reduced = reduceLines($2);

    if (reduced.length != 1) {
      throw new Error("Must have exactly one root node.");
    }

    return reduced[0];

Line
  Indent LineBody EOS -> [1, 2]

LineBody
  Tag DeprecatedEquals? _ RestOfLine ->
    $1[2].push($4)
    return $1
  Tag _? -> 1
  "|" " "? RestOfLine ->
    return $3 + "\n";
  (DeprecatedEquals _)? RestOfLine -> 2

RestOfLine
  /[^\n\r]*/ ->
    // TODO: Handle runs of text with bound content inside
    if ($0.slice(0,1) === "@") {
      return {
        bind: $0.slice(1)
      }
    } else {
      return $0
    }

DeprecatedEquals
  "=" ->
    console.warn("'= <content>' is deprecated, you can remove the '=' without issue.")

Tag
  TagName OptionalIds OptionalClasses OptionalAttributes ->
    return [
      $1,
      $2.concat($3, $4),
      [],
    ]
  Ids OptionalClasses OptionalAttributes ->
    return [
      "div",
      $1.concat($2, $3),
      [],
    ]
  Classes OptionalAttributes ->
    return [
      "div",
      $1.concat($2),
      [],
    ]

OptionalClasses
  Classes
  "" ->
    return []

Classes
  Class+

Class
  "." Identifier -> 
    return ["class", $2]
  "." !Identifier ->
    throw "Expected a class name"
  IdError

OptionalIds
  Ids? ->
    return $1 || []

Ids
  Id ->
    return [ $1 ]

Id
  "#" Identifier ->
    return ["id", $2]
  "#" !Identifier ->
    throw "Expected an id name"

IdError
  "#" ->
    throw "Ids must appear before classes and attributes. Elements can only have one id."

ClassError
  "." ->
    throw "Classes cannot appear after attributes."

TagName
  Identifier

OptionalAttributes
  "(" __? Attribute+ ")" IdError? ClassError? ->
    return $3
  "(" ->
    throw "Invalid attributes"
  "" ->
    return []

Attribute
  AtIdentifier __? ->
    return [$1.bind, $1]
  EqBinding __? -> 1
  Identifier __? ->
    return [$1, ""]

AtIdentifier
  "@" Identifier -> 
    return {
      bind: $2
    }

EqBinding
  Identifier "=" ( AtIdentifier / Value ) -> [1, 3]

Identifier
  /[a-zA-Z][a-zA-Z0-9-]*/

Indent
  ( "  " / "\t" )* ->
    return $1.length

_
  /[ \t]+/

__
  (/[ \t]/ / EOL)+

Value
  "\"" DoubleStringCharacter* "\"" ->
    return $2.join("")
  "'" SingleStringCharacter* "'" ->
    return $2.join("")
  Number

DoubleStringCharacter
  !("\"" / "\\") /./ -> 2
  "\\" EscapeSequence -> 2

SingleStringCharacter
  !("'" / "\\") /./ -> 2
  "\\" EscapeSequence -> 2

EscapeSequence
  "'"
  "\""
  "\\"
  /./  ->
    return "\\" + $0

Number
  /-?[0-9]+\.[0-9]+/
  /-?[0-9]+/

EOS
  (_? EOL)+ _ EOF
  (_? EOL)+
  EOF

EOL
  "\r\n"
  "\n"
  "\r"

EOF
  !/[\s\S]/
